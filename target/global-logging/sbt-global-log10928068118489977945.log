[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\PC\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\PC\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.2 (Oracle Corporation Java 17.0.6)
[debug] Load.defaultLoad until apply took 66.0989ms
[debug]           Load.loadUnit: plugins took 40.2239ms
[debug]           Load.loadUnit: defsScala took 0.1271ms
[debug] [Loading] Scanning directory C:\Users\PC\Desktop\ecommerce-microservices\project
[debug]             Load.loadUnit: mkEval took 3.5198ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PC\Desktop\ecommerce-microservices\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.6539 ms
[info] loading settings for project ecommerce-microservices-build from idea.sbt ...
[debug]               Load.resolveProject(ecommerce-microservices-build) took 20.853401ms
[debug]             Load.loadTransitive: finalizeProject(Project(id ecommerce-microservices-build, base: C:\Users\PC\Desktop\ecommerce-microservices\project, plugins: List(<none>))) took 30.7033ms
[debug] [Loading] Done in C:\Users\PC\Desktop\ecommerce-microservices\project, returning: (ecommerce-microservices-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1120.8712ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.3941ms
[debug]         Load.loadUnit(file:/C:/Users/PC/Desktop/ecommerce-microservices/project/, ...) took 1168.5612ms
[debug]       Load.apply: load took 1225.02ms
[debug]       Load.apply: resolveProjects took 2.2852ms
[debug]       Load.apply: finalTransforms took 25.708ms
[debug]       Load.apply: config.delegates took 3.070801ms
[debug]       Load.apply: Def.make(settings)... took 167.2765ms
[debug]       Load.apply: structureIndex took 53.8277ms
[debug]       Load.apply: mkStreams took 0.772401ms
[info] loading project definition from C:\Users\PC\Desktop\ecommerce-microservices\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2209.1805ms
[debug]     Load.loadUnit: defsScala took 0.0014ms
[debug] [Loading] Scanning directory C:\Users\PC\Desktop\ecommerce-microservices
[debug]       Load.loadUnit: mkEval took 0.156101ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9828 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 19.069299ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\PC\Desktop\ecommerce-microservices, plugins: List(<none>))) took 20.9219ms
[debug] [Loading] Done in C:\Users\PC\Desktop\ecommerce-microservices, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 562.310499ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.6031ms
[debug]   Load.loadUnit(file:/C:/Users/PC/Desktop/ecommerce-microservices/, ...) took 2783.9713ms
[debug] Load.apply: load took 2795.1256ms
[debug] Load.apply: resolveProjects took 0.0827ms
[debug] Load.apply: finalTransforms took 17.5848ms
[debug] Load.apply: config.delegates took 0.1984ms
[debug] Load.apply: Def.make(settings)... took 34.3824ms
[debug] Load.apply: structureIndex took 12.261401ms
[debug] Load.apply: mkStreams took 0.002401ms
[info] set current project to ecommerce-microservices (in build file:/C:/Users/PC/Desktop/ecommerce-microservices/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62337 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62337, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ecommerce-microservices (in build file:/C:/Users/PC/Desktop/ecommerce-microservices/)
[debug] > Exec(idea-shell, None, None)
